name: DevSecOps Pipeline

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main

jobs:
  security-scan:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [vote, worker, result]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      # Python Security (Vote-App)
      - name: Run Python Security Tools (Vote-App)
        if: matrix.service == 'vote-app'
        run: |
            pip install -r ./vote/requirements.txt

      # .NET Security (Worker-App)
      - name: Run .NET Security Tools (Worker-App)
        if: matrix.service == 'worker-app'
        run: |
             cd ./worker
             dotnet restore # Ensure dependencies are restored before scanning
             dotnet list Worker.csproj package --vulnerable # Use correct case-sensitive filename

      # Node.js Security (Result-App)
      - name: Run Node.js Security Tools (Result-App)
        if: matrix.service == 'result-app'
        run: |
         cd ./result 
         npm audit --audit-level=critical

  build-and-scan:
     needs: security-scan
     runs-on: ubuntu-latest
     strategy:
       matrix:
        service: [vote, worker, result]  # Updated directory names to match security-scan
     steps:
     - name: Checkout Code
       uses: actions/checkout@v3

     - name: Verify Directory Exists (${{ matrix.service }})
       run: |
        ls -l
        if [ ! -d "${{ matrix.service }}" ]; then 
          echo "Error: Directory ${{ matrix.service }} not found!";
          exit 1;
        fi

     - name: Build Docker Image (${{ matrix.service }})
       run: |
        cd ${{ matrix.service }}
        docker build -t mahnoorsaeed15/${{ matrix.service }}:latest .
        cd ..

     - name: Login to Docker Hub
       run: |
        echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

     - name: Push to Docker Hub (${{ matrix.service }})
       run: |
        docker tag mahnoorsaeed15/${{ matrix.service }}:latest mahnoorsaeed15/${{ matrix.service }}:latest
        docker push mahnoorsaeed15/${{ matrix.service }}:latest

     - name: Trivy Security Scan (${{ matrix.service }})
       run: |
        docker run --rm aquasec/trivy image mahnoorsaeed15/${{ matrix.service }}:latest

  sonarQubeScan:
    name: SonarQube Scan
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [vote, worker, result]  # Ensure all services are scanned
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      # ✅ Verify Directory Exists Before Running SonarQube
      - name: Verify Directory Exists (${{ matrix.service }})
        run: |
          ls -l
          if [ ! -d "${{ matrix.service }}" ]; then 
            echo "Error: Directory ${{ matrix.service }} not found!";
            exit 1;
          fi

      # ✅ Cache SonarScanner to Avoid Repeated Downloads
      - name: Cache SonarScanner
        uses: actions/cache@v4
        with:
          path: ~/.sonar-scanner
          key: sonar-scanner-cli

      # ✅ Install SonarScanner If Not Cached
      - name: Install SonarScanner
        run: |
          if [ ! -d "~/.sonar-scanner" ]; then
            sudo apt-get update && sudo apt-get install -y unzip wget
            wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.8.0.2856-linux.zip
            unzip sonar-scanner-cli-4.8.0.2856-linux.zip
            mv sonar-scanner-4.8.0.2856-linux ~/.sonar-scanner
          fi
          echo "~/.sonar-scanner/bin" >> $GITHUB_PATH

      # ✅ Verify SonarQube Project Properties File Exists
      - name: Verify sonar-project.properties Exists
        run: |
          if [ ! -f "${{ matrix.service }}/sonar-project.properties" ]; then 
            echo "Error: sonar-project.properties not found in ${{ matrix.service }}!";
            exit 1;
          fi

      # ✅ Run SonarScanner
      - name: Run SonarScanner (${{ matrix.service }})
        run: |
          sonar-scanner -Dsonar.projectBaseDir=${{ matrix.service }} \
                        -Dsonar.host.url=$SONAR_HOST_URL \
                        -Dsonar.login=$SONAR_TOKEN
        env:
          SONAR_HOST_URL: "http://20.55.25.25:9000"  # Update with your SonarQube Server
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}    # Ensure this is stored in GitHub Secrets
